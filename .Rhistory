toydata2<- read.csv("tes2.csv")
toydata <- createToyData()
# Set parameters for the visualization
infotext <- get.infotext.lmr(c("Gene-Drug Candidates", "Genes", "Missing Pathways", "Drugs"))
font.sizes <-  c(26, 26, 30, 30, 60, 60)
radius.adjustments <-  c(-300, -300, 1.0, 0.8, 0.8, 90)
curve.factors <-  c(10, 10, 5, 20)
# Write input
writeEyeDiagramInput(toydata$doc2topic, toydata$word2topic, input.folder, output.file, infotext, font.sizes=font.sizes, radius.adjustments=radius.adjustments, curve.factors=curve.factors, topic.names=colnames(toydata$doc2topic))
# To produce the final visualization you can either
# - use Processing (www.processing.org) to run the eyediagram.pde script
# - use the precompiled java script to run the script
# Here I have precompiled the script (for linux), so I can run it directly
system("C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\application.windows\\eyediagram")
createToyData()
createToyData <- function(Ntopics=5, NdocsPerTopic=6, NwordsPerTopic=8,
in.mean=0.3, in.sd=0.2, out.mean=-0.2, out.sd=0.2) {
# Initialize matrices
doc2topic <- matrix(NA, Ntopics*NdocsPerTopic, Ntopics)
word2topic <- matrix(NA, Ntopics*NwordsPerTopic, Ntopics)
rownames(doc2topic) <- paste("Document", 1:(Ntopics*NdocsPerTopic), sep="_")
rownames(word2topic) <- paste("Word", 1:(Ntopics*NwordsPerTopic), sep="_")
colnames(doc2topic) <- paste("Z",1:Ntopics,sep="")
# Sample random weights
# Higher weights within topics
for (i in 1:Ntopics) {
doc2topic[(1:NdocsPerTopic)+(i-1)*NdocsPerTopic,i] <-  rnorm(NdocsPerTopic, in.mean, in.sd)
word2topic[(1:NwordsPerTopic)+(i-1)*NwordsPerTopic,i] <-  rnorm(NwordsPerTopic, in.mean, in.sd)
}
# Lower weights elsewhere
doc2topic[which(is.na(doc2topic))] <-  rnorm(NdocsPerTopic*Ntopics*(Ntopics-1), out.mean, out.sd)
word2topic[which(is.na(word2topic))] <-  rnorm(NwordsPerTopic*Ntopics*(Ntopics-1), out.mean, out.sd)
# Set negative weights to zero
doc2topic[doc2topic < 0] <-  0
word2topic[word2topic < 0] <-  0
return(list(doc2topic=doc2topic, word2topic=word2topic))
}
createToyData()
createToyData <- function(Ntopics=5, NdocsPerTopic=6, NwordsPerTopic=8,
in.mean=0.3, in.sd=0.2, out.mean=-0.2, out.sd=0.2) {
# Initialize matrices
doc2topic <- matrix(NA, Ntopics*NdocsPerTopic, Ntopics)
word2topic <- matrix(NA, Ntopics*NwordsPerTopic, Ntopics)
rownames(doc2topic) <- paste("Docwwwument", 1:(Ntopics*NdocsPerTopic), sep="_")
rownames(word2topic) <- paste("Word", 1:(Ntopics*NwordsPerTopic), sep="_")
colnames(doc2topic) <- paste("Z",1:Ntopics,sep="")
# Sample random weights
# Higher weights within topics
for (i in 1:Ntopics) {
doc2topic[(1:NdocsPerTopic)+(i-1)*NdocsPerTopic,i] <-  rnorm(NdocsPerTopic, in.mean, in.sd)
word2topic[(1:NwordsPerTopic)+(i-1)*NwordsPerTopic,i] <-  rnorm(NwordsPerTopic, in.mean, in.sd)
}
# Lower weights elsewhere
doc2topic[which(is.na(doc2topic))] <-  rnorm(NdocsPerTopic*Ntopics*(Ntopics-1), out.mean, out.sd)
word2topic[which(is.na(word2topic))] <-  rnorm(NwordsPerTopic*Ntopics*(Ntopics-1), out.mean, out.sd)
# Set negative weights to zero
doc2topic[doc2topic < 0] <-  0
word2topic[word2topic < 0] <-  0
return(list(doc2topic=doc2topic, word2topic=word2topic))
}
createToyData()
Ntopics=5, NdocsPerTopic=6, NwordsPerTopic=8, in.mean=0.3, in.sd=0.2, out.mean=-0.2, out.sd=0.2)
Ntopics=5,
NdocsPerTopic=6,
NwordsPerTopic=8,
in.mean=0.3,
in.sd=0.2,
out.mean=-0.2,
out.sd=0.2
createToyData <- function(Ntopics=5, NdocsPerTopic=6, NwordsPerTopic=8,
in.mean=0.3, in.sd=0.2, out.mean=-0.2, out.sd=0.2) {
Ntopics<-5;
NdocsPerTopic <- 6;
NwordsPerTopic <- 8;
in.mean <-0.3
# Initialize matrices
doc2topic <- matrix(NA, Ntopics*NdocsPerTopic, Ntopics)
word2topic <- matrix(NA, Ntopics*NwordsPerTopic, Ntopics)
rownames(doc2topic) <- paste("Document", 1:(Ntopics*NdocsPerTopic), sep="_")
rownames(word2topic) <- paste("Word", 1:(Ntopics*NwordsPerTopic), sep="_")
colnames(doc2topic) <- paste("Z",1:Ntopics,sep="")
# Sample random weights
# Higher weights within topics
for (i in 1:Ntopics) {
doc2topic[(1:NdocsPerTopic)+(i-1)*NdocsPerTopic,i] <-  rnorm(NdocsPerTopic, in.mean, in.sd)
word2topic[(1:NwordsPerTopic)+(i-1)*NwordsPerTopic,i] <-  rnorm(NwordsPerTopic, in.mean, in.sd)
}
# Lower weights elsewhere
doc2topic[which(is.na(doc2topic))] <-  rnorm(NdocsPerTopic*Ntopics*(Ntopics-1), out.mean, out.sd)
word2topic[which(is.na(word2topic))] <-  rnorm(NwordsPerTopic*Ntopics*(Ntopics-1), out.mean, out.sd)
# Set negative weights to zero
doc2topic[doc2topic < 0] <-  0
word2topic[word2topic < 0] <-  0
return(list(doc2topic=doc2topic, word2topic=word2topic))
}
Ntopics<-5;
NdocsPerTopic <- 6;
NwordsPerTopic <- 8;
in.mean <-0.3
# Initialize matrices
doc2topic <- matrix(NA, Ntopics*NdocsPerTopic, Ntopics)
doc2topic
word2topic <- matrix(NA, Ntopics*NwordsPerTopic, Ntopics)
"D",1:5
1:5
paste("D")
paste("D", 1:5)
paste("D", 1:5,sep=".")
paste("D", 1:5,sep="_")
word2topic
# Example script for the eye diagram visualization
# (c) 2011-2012, Juuso Parkkinen (juuso.parkkinen@gmail.com)
# Read eye diagram preprocessing code
source("C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\eyediagram.R")
# Set filepaths
input.folder <- "C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\example\\input\\"
output.file <- "C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\example\\ExampleEyeDiagram"
if (!file.exists(input.folder))
dir.create(input.folder)
# Create toy data
toydata1 <- read.csv("tes.csv")#createToyData()
toydata2<- read.csv("tes2.csv")
toydata <- createToyData()
# Set parameters for the visualization
infotext <- get.infotext.lmr(c("Gene-Drug Candidates", "Genes", "Missing Pathways", "Drugs"))
font.sizes <-  c(26, 26, 30, 30, 60, 60)
radius.adjustments <-  c(-300, -300, 1.0, 0.8, 0.8, 90)
curve.factors <-  c(10, 10, 5, 20)
# Write input
writeEyeDiagramInput(toydata$doc2topic, toydata$word2topic, input.folder, output.file, infotext, font.sizes=font.sizes, radius.adjustments=radius.adjustments, curve.factors=curve.factors, topic.names=colnames(toydata$doc2topic))
# To produce the final visualization you can either
# - use Processing (www.processing.org) to run the eyediagram.pde script
# - use the precompiled java script to run the script
# Here I have precompiled the script (for linux), so I can run it directly
system("C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\application.windows\\eyediagram")
toydata
# Example script for the eye diagram visualization
# (c) 2011-2012, Juuso Parkkinen (juuso.parkkinen@gmail.com)
# Read eye diagram preprocessing code
source("C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\eyediagram.R")
# Set filepaths
input.folder <- "C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\example\\input\\"
output.file <- "C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\example\\ExampleEyeDiagram"
if (!file.exists(input.folder))
dir.create(input.folder)
# Create toy data
toydata1 <- read.csv("tes.csv")#createToyData()
toydata2<- read.csv("tes2.csv")
toydata <- createToyData()
# Set parameters for the visualization
infotext <- get.infotext.lmr(c("Gene-Drug Candidates", "Genes", "Missing Pathways", "Drugs"))
font.sizes <-  c(26, 26, 30, 30, 60, 60)
radius.adjustments <-  c(-300, -300, 1.0, 0.8, 0.8, 90)
curve.factors <-  c(10, 10, 5, 20)
# Write input
writeEyeDiagramInput(toydata$doc2topic, toydata$word2topic, input.folder, output.file, infotext, font.sizes=font.sizes, radius.adjustments=radius.adjustments, curve.factors=curve.factors, topic.names=colnames(toydata$doc2topic))
# To produce the final visualization you can either
# - use Processing (www.processing.org) to run the eyediagram.pde script
# - use the precompiled java script to run the script
# Here I have precompiled the script (for linux), so I can run it directly
system("C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\application.windows\\eyediagram")
Ntopics<-5;
NdocsPerTopic <- 6;
NwordsPerTopic <- 8;
in.mean <-0.3
Ntopics<-2;
NdocsPerTopic <- 3;
NwordsPerTopic <- 3;
in.mean <-0.3
# Initialize matrices
doc2topic <- matrix(NA, Ntopics*NdocsPerTopic, Ntopics)
word2topic <- matrix(NA, Ntopics*NwordsPerTopic, Ntopics)
rownames(doc2topic) <- paste("Document", 1:(Ntopics*NdocsPerTopic), sep="_")
rownames(word2topic) <- paste("Word", 1:(Ntopics*NwordsPerTopic), sep="_")
doc2topic
rownames(doc2topic) <- c("Test","Te","ssd")
rownames(doc2topic) <- c("Test","Te","ssd")
rownames(doc2topic) <- c("Test";"Te";"ssd")
paste("Word", 1:(Ntopics*NwordsPerTopic), sep="_")
rownames(doc2topic) <- c("Test" "Te" "ssd")
rownames(doc2topic) <- ("Test" "Te" "ssd")
doc2topic <- matrix(NA, Ntopics*NdocsPerTopic, Ntopics)
rownames(doc2topic) <- ("Test" "Te" "ssd")
rownames(doc2topic) <- ("Test" "Te" "ssd")
rownames(doc2topic) <- ("Test", "Te", "ssd")
doc2topic
rownames(doc2topic) <- c("Test", "Te", "ssd",)
rownames(doc2topic) <- c("Test", "Te", "ssd","s")
rownames(doc2topic) <- c("Test", "Te", "ssd","s","s")
rownames(doc2topic) <- c("Test", "Te", "ssd","s","s","ss")
word2topic <- matrix(NA, Ntopics*NwordsPerTopic, Ntopics)
rownames(doc2topic) <- c("Test", "Te", "ssd","s","s","ss")
rownames(word2topic) <- c("Test", "Te", "ssd","s","s","ss")
colnames(doc2topic) <- paste("Z",1:Ntopics,sep="")
# Sample random weights
# Higher weights within topics
for (i in 1:Ntopics) {
doc2topic[(1:NdocsPerTopic)+(i-1)*NdocsPerTopic,i] <-  rnorm(NdocsPerTopic, in.mean, in.sd)
word2topic[(1:NwordsPerTopic)+(i-1)*NwordsPerTopic,i] <-  rnorm(NwordsPerTopic, in.mean, in.sd)
}
# Example script for the eye diagram visualization
# (c) 2011-2012, Juuso Parkkinen (juuso.parkkinen@gmail.com)
# Read eye diagram preprocessing code
source("C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\eyediagram.R")
# Set filepaths
input.folder <- "C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\example\\input\\"
output.file <- "C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\example\\ExampleEyeDiagram"
if (!file.exists(input.folder))
dir.create(input.folder)
# Create toy data
toydata1 <- read.csv("tes.csv")#createToyData()
toydata2<- read.csv("tes2.csv")
toydata <- createToyData()
# Set parameters for the visualization
infotext <- get.infotext.lmr(c("Gene-Drug Candidates", "Genes", "Missing Pathways", "Drugs"))
font.sizes <-  c(26, 26, 30, 30, 60, 60)
radius.adjustments <-  c(-300, -300, 1.0, 0.8, 0.8, 90)
curve.factors <-  c(10, 10, 5, 20)
# Write input
writeEyeDiagramInput(toydata$doc2topic, toydata$word2topic, input.folder, output.file, infotext, font.sizes=font.sizes, radius.adjustments=radius.adjustments, curve.factors=curve.factors, topic.names=colnames(toydata$doc2topic))
# To produce the final visualization you can either
# - use Processing (www.processing.org) to run the eyediagram.pde script
# - use the precompiled java script to run the script
# Here I have precompiled the script (for linux), so I can run it directly
system("C:\\Users\\anura\\Desktop\\pyapps\\eyediagram\\application.windows\\eyediagram")
setwd("~/Bioinformatics/Code")
library("DESeq2")
dat<-read.table("f.csv",header = T,quote = "",row.names = 1)
# Convert to matrix
dat <- as.matrix(dat)
head(dat)
# Assign condition (first three are WT, next three are mutants)
condition <- factor(c(rep("Healthy",4),rep("Infected",4)))
condition=relevel(condition,ref = "Healthy")
# Create a coldata frame: its rows correspond to columns of dat (i.e., matrix representing the countData)
coldata <- data.frame(row.names=colnames(dat), condition)
head(coldata)
#            condition
# S293        WT
# S294        WT
# S295        WT
# S296       Mut
# S297       Mut
# S298       Mut
##### DESEq pipeline, first the design and the next step, normalizing to model fitting
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata,design=~ condition)
dds <- DESeq(dds)
# Plot Dispersions:
png("qc-dis_1.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
# Principal Components Analysis
plotPCA(rld)
dev.off()
# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Get differential expression results
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
names(resdata)[1] <- "Gene"
head(resdata)
## Write results
write.csv(resdata, file="diffexpr-results1.csv",quote = FALSE,row.names = F)
## Examine plot of p-values
hist(res$pvalue, breaks=50, col="grey")
## MA plot
## Could do with built-in DESeq2 function:
## DESeq2::plotMA(dds, ylim=c(-1,1), cex=1)
## This is Stephen Turner's code:
maplot <- function (res, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(res, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(res, padj<thresh), points(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=2))
}
}
png("diffexpr-maplot1.png", 1500, 1000, pointsize=20)
maplot(resdata, main="MA Plot")
dev.off()
## Plots to Examine Results:
## Volcano plot with "significant" genes labeled
volcanoplot <- function (res, lfcthresh=2, sigthresh=0.05, main="Volcano Plot", legendpos="bottomright", labelsig=TRUE, textcx=1, ...) {
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))
with(subset(res, padj<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))
with(subset(res, abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="orange", ...))
with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))
if (labelsig) {
require(calibrate)
with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), labs=Gene, cex=textcx, ...))
}
legend(legendpos, xjust=1, yjust=1, legend=c(paste("FDR<",sigthresh,sep=""), paste("|LogFC|>",lfcthresh,sep=""), "both"), pch=20, col=c("red","orange","green"))
}
png("diffexpr-volcanoplot1.png", 1200, 1000, pointsize=20)
volcanoplot(resdata, lfcthresh=1, sigthresh=0.05, textcx=.8, xlim=c(-2.3, 2))
dev.off()
library("DESeq2")
dat<-read.table("f.csv",header = T,quote = "",row.names = 1)
# Convert to matrix
dat <- as.matrix(dat)
head(dat)
# Assign condition (first three are WT, next three are mutants)
condition <- factor(c(rep("Healthy",4),rep("Infected",4)))
condition=relevel(condition,ref = "Healthy")
# Create a coldata frame: its rows correspond to columns of dat (i.e., matrix representing the countData)
coldata <- data.frame(row.names=colnames(dat), condition)
head(coldata)
##### DESEq pipeline, first the design and the next step, normalizing to model fitting
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata,design=~ condition)
dds <- DESeq(dds)
# Plot Dispersions:
png("qc-dis_1.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
dev.off()
##### DESEq pipeline, first the design and the next step, normalizing to model fitting
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata,design=~ condition)
dds <- DESeq(dds)
##### DESEq pipeline, first the design and the next step, normalizing to model fitting
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata,design=~ condition)
##### DESEq pipeline, first the design and the next step, normalizing to model fitting
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata,design=~ condition)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
Features_1.csv
Features_1.csv
dat<-read.csv("Features_1.csv",header = T,quote = "",row.names = 1,sep = ",")
dat<-read.csv("Features_1.csv",header = T,quote = "",row.names = 1,sep = ",")
# Convert to matrix
dat <- as.matrix(dat)
head(dat)
condition <- factor(c(rep("Healthy",4),rep("Infected",4)))
condition=relevel(condition,ref = "Healthy")
# Create a coldata frame: its rows correspond to columns of dat (i.e., matrix representing the countData)
coldata <- data.frame(row.names=colnames(dat), condition)
head(coldata)
##### DESEq pipeline, first the design and the next step, normalizing to model fitting
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata,design=~ condition)
dds <- DESeq(dds)
# Plot Dispersions:
png("qc-dis_1.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
# Principal Components Analysis
plotPCA(rld)
dev.off()
# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Get differential expression results
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
names(resdata)[1] <- "Gene"
head(resdata)
## Write results
write.csv(resdata, file="diff_exp_results.csv",quote = FALSE,row.names = F)
setwd("~/Bioinformatics/Code/Final_Code")
library("DESeq2")
dat<-read.csv("Features_1.csv",header = T,quote = "",row.names = 1,sep = ",")
# Convert to matrix
dat <- as.matrix(dat)
head(dat)
condition <- factor(c(rep("Healthy",4),rep("Infected",4)))
condition=relevel(condition,ref = "Healthy")
# Create a coldata frame: its rows correspond to columns of dat (i.e., matrix representing the countData)
coldata <- data.frame(row.names=colnames(dat), condition)
head(coldata)
library("DESeq2")
dat<-read.csv("Features_1.csv",header = T,quote = "",row.names = 1,sep = ",")
# Convert to matrix
dat <- as.matrix(dat)
head(dat)
head(dat)
condition <- factor(c(rep("Healthy",4),rep("Infected",4)))
condition=relevel(condition,ref = "Healthy")
# Create a coldata frame: its rows correspond to columns of dat (i.e., matrix representing the countData)
coldata <- data.frame(row.names=colnames(dat), condition)
head(coldata)
##### DESEq pipeline, first the design and the next step, normalizing to model fitting
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata,design=~ condition)
dds <- DESeq(dds)
# Plot Dispersions:
png("qc-dis_1.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
# Principal Components Analysis
plotPCA(rld)
dev.off()
# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Get differential expression results
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
names(resdata)[1] <- "Gene"
head(resdata)
## Write results
write.csv(resdata, file="diff_exp_results.csv",quote = FALSE,row.names = F)
setwd("~/Bioinformatics/Code/Final_Code")
library("DESeq2")
dat<-read.csv("Features_1.csv",header = T,quote = "",row.names = 1,sep = ",")
# Convert to matrix
dat <- as.matrix(dat)
head(dat)
condition <- factor(c(rep("Healthy",4),rep("Infected",4)))
condition=relevel(condition,ref = "Healthy")
# Create a coldata frame: its rows correspond to columns of dat (i.e., matrix representing the countData)
coldata <- data.frame(row.names=colnames(dat), condition)
head(coldata)
##### DESEq pipeline, first the design and the next step, normalizing to model fitting
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata,design=~ condition)
##### DESEq pipeline, first the design and the next step, normalizing to model fitting
dds <- DESeqDataSetFromMatrix(countData = dat, colData = coldata,design=~ condition)
dds <- DESeq(dds)
# Plot Dispersions:
png("qc-dis_1.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
# Principal Components Analysis
plotPCA(rld)
dev.off()
# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Get differential expression results
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
names(resdata)[1] <- "Gene"
head(resdata)
## Write results
write.csv(resdata, file="diff_exp_results.csv",quote = FALSE,row.names = F)
